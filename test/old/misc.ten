assert( bcmp( cat( "Hello, ", "World!" ), '=', "Hello, World!" ), "1" )

def s: seq( "Hello, ", "World!" )
assert( bcmp( join( s, "" ), '=', "Hello, World!" ), "2" )

assert( ucode'ぁ' = 12353, "3" )
assert( uchar( 12353 ) = 'ぁ', "4" )

assert( bcmp( "abc", '<', "cba" ), "5" )
assert( bcmp( "cba", '>', "abc" ), "6" )
assert( bcmp( "abc", '=', "abc" ), "7" )

assert( ccmp( "abc", '<', "cba" ), "8" )
assert( ccmp( "cba", '>', "abc" ), "9" )
assert( ccmp( "abc", '=', "abc" ), "10" )

assert( ccmp( "ぁ", '<', "ぃ" ), "11" )
assert( ccmp( "ぃ", '>', "ぁ" ), "12" )
assert( ccmp( "ぁ", '=', "ぁ" ), "13" )

assert( bcmp( bsub( "abc", 1 ), '=', "a" ), "14" )
assert( bcmp( bsub( "abc", -1 ), '=', "c" ), "15" )
assert( ccmp( csub( "ぁぃ", 1 ), '=', "ぁ" ), "16" )
assert( ccmp( csub( "ぁぃ", -1 ), '=', "ぃ" ), "17" )

assert( hex"FFF" = 4095, "18" )
assert( hex"F.F" = 15.9375, "19" )
assert( oct"666" = 438, "20" )
assert( bin"110" = 6, "21" )

assert( pipe( 1, [ v ] v + 1, [ v ] v*2 ) = 4, "22" )
assert( pipe( nil, [ v ] udf ) != udf, "23" )

def p: pump( seq( 1, 2, 3 ), [ v ] v + 1 )
assert( p() = 2, "24" )
assert( p() = 3, "25" )
assert( p() = 4, "26" )
assert( p() = nil, "27" )

def p: rpump( seq( 1, 2, 3 ), { [ v ] if v = 2: udf else v } )
assert( p() = 1, "28" )
assert( p() = 3, "29" )
assert( p() = nil, "30" )
